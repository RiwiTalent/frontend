@page "/"
@using riwi.Services
@using riwi.Models
@inject CoderService coderService

<head>
    <link rel="stylesheet" href="css/home.css">
</head>


<PageTitle>Coders</PageTitle>

<MudText class="title">
    Listado de Coders
</MudText>

@if(coders != null)
{
    <div class="container-cards">
    
        @foreach(var coder in coders)
        {
            <MudCard>
                    <MudImage Src="@coder.Photo" Alt="profile"></MudImage>
                <MudCardContent>
                        <div class="profile-info">
                            <div class="container">
                                <div class="coder">
                                    <h3>@coder.FirstName</h3>
                                    <p>@coder.Stack</p>
                                </div>
                                <div class="circle">||</div>
                                <a><i class="fa-regular fa-heart"></i></a>
                            </div>
                            @*badges*@
                            <div class="badges">
                                <div class="badge">UX/UI</div>
                                <div class="badge">Js</div>
                                <div class="badge">C#</div>
                            </div>
                            @*Buttons*@
                            <div class="buttons">
                                <MudButton style="background: #fff;" Variant="Variant.Filled">Message</MudButton>
                                <MudButton Color="Color.Primary" Variant="Variant.Filled">Hire</MudButton>      
                            </div>
                        </div>

                </MudCardContent>
            </MudCard>
        }
    </div>
}
else
{
    <p><em>Loading...</em></p>
}
@* <MudButton @onclick="VerifyCoder">Verificar Api</MudButton> *@

@code
{
    public string ButtonMessage = "Message";
    public string ButtonHire = "Hire";
    private List<Coder>? coders;
    protected override async Task OnInitializedAsync()
    {
        //realizamos el llamado a la api
        try
        {
            coders = await coderService.GetCodersAsync();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }
    public void VerifyCoder()
    {
        if(coderService is null)
        {
            Console.WriteLine("No hay nada");
        }
        else{
            Console.WriteLine($"Existe un usuario {coders?.Count ?? 0}");
        }
    }
}


