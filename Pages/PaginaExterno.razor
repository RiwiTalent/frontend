@page "/{groupId}"
@inject GroupCodersServices _groupCodersServices
@using riwi.Models;
@inject IModalService ModalService
@layout ExternalLayout

<MudForm Style="display: flex; align-items: center " Valid="IniciarSesion">
    <br>
    <p class="input-container form-group Login_contenedor_input">
        <span class="correo_span">Correo</span>
        <label for="Password" class="input-icon-container">
            <img src="images/mail-filled.svg" alt="Icono de correo electronico" class="input-icon" />
        </label>
        <input type="email" @bind="@AssociateEmail" name="Email" id="text" class="input-field">
    </p>
    <br>
    <p class="input-container form-group Login_contenedor_input">
        <span class="Password_span">Contraseña</span>
        <label for="Password" class="input-icon-container">
            <img src="images/lock.svg" alt="Icono de contraseña" class="input-icon" />
        </label>
        <input type="password" placeholder="Ingresa tu contraseña" @bind="@Key" name="Password" id="Password" class="input-field" autocomplete="Password">
        <label for="Password" class="eye-icon-container end-icon">
            <img src="images/eye-off.svg" alt="Icono para ocultar/mostrar contraseña" class="eye-icon" />
        </label>
    </p>

    <div class="button-container">
        <button type="button" class="btn mt-3 Ingresar" @onclick="IniciarSesion">Ingresar</button>
    </div>
</MudForm>

@code {
    [Parameter] public Group? Group { get; set; } // Asegúrate de que sea nullable
    [Parameter] public required string AssociateEmail { get; set; }
    [Parameter]
    public string? groupId { get; set; }
    [Parameter] public required string Name { get; set; }
    [Parameter] public required string Key { get; set; }
    
    public AuthExternalRequest login { get; set; } = new();

    private async Task IniciarSesion()
    {
        var login = new AuthExternalRequest
        {
            GroupId = groupId,
            AssociateEmail = AssociateEmail,
            Key = Key
        };

        var authResult = await _groupCodersServices.AuthenticationExternalAsync(login);
        Console.WriteLine(authResult);
        Console.WriteLine($"Sending: GroupId={login.GroupId}, Email={login.AssociateEmail}, Key={login.Key}");

        if (authResult)
        {
            Console.WriteLine("login successful!");
            // Mostrar modal y manejar autenticación
            var parameters = new ModalParameters();
            var modal = ModalService.Show<TermsAndConditionsComponent>("Términos y Condiciones", parameters);
            await modal.Result;

            // Redirigir o cargar otros datos
            await LoadCodersAsync();
        }
        else
        {
            Console.WriteLine("Error en la autenticación.");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        // Llamar a LoadCodersAsync cuando la página se inicialice
        await LoadCodersAsync();
    }

   private async Task LoadCodersAsync()
    {
        try
        {
            Group = await _groupCodersServices.GetGroupInfoById(groupId);

            if (Group != null)
            {
                Console.WriteLine($"ID: {Group?.Id}");
                Console.WriteLine($"AssociateEmail: {Group?.AssociateEmail}");
                Console.WriteLine($"CreatedBy: {Group?.CreatedBy}");
            }
            else
            {
                Console.WriteLine("No se encontró información del grupo.");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener la información del grupo: {ex.Message}");
        }
    }

}
