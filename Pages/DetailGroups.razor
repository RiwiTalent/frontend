@page "/detailgroups"
@using Microsoft.AspNetCore.Authorization;
@using riwi.Services;
@using riwi.Models;
@inject GroupsServices GroupsServices;
@attribute [Authorize]

<PageTitle>Detalle Grupo</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer Class="d-flex flex-grow-1 flex-column">
            <!-- Botón para volver y alternar edición -->
            <MudContainer Class="d-flex justify-space-between flex-grow-1 gap-4 pa-3 ma-2">
                <MudIconButton Href="/Home" Icon="@Icons.Material.Rounded.KeyboardArrowLeft" Color="Color.Secondary" Class="border-solid border-2 mud-border-secondary pa-2"></MudIconButton>
                @if (!isEditMode)
                {
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Edit" Color="Color.Secondary" OnClick="EnableEditMode">
                        Editar
                    </MudButton>
                }
                else
                {
                    <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="SaveChanges">
                        Guardar
                    </MudButton>
                }
            </MudContainer>

            <!-- Detalles del Grupo (Modo de Visualización y Edición) -->
            <MudPaper Elevation="0" class="content_left-container_top">
                <MudText>
                    @if (!isEditMode)
                    {
                        <b>@Group.Name</b>
                    }
                    else
                    {
                        <MudTextField T="string" @bind-Value="Group.Name" Label="Nombre del Grupo" />
                    }
                </MudText>

                <MudText Color="Color.Primary" Typo="Typo.subtitle2">
                    @if (!isEditMode)
                    {
                        @Group.Status
                    }
                    else
                    {
                        <MudTextField T="string" @bind-Value="Group.Status" Label="Estado del Grupo" />
                    }
                </MudText>

                @if (isEditMode)
                {
                    <MudTextField T="string" @bind-Value="Group.Description" Label="Descripción del Grupo" />
                }
            </MudPaper>
        </MudContainer>
    </Authorized>
</AuthorizeView>

@code {
    private bool isEditMode = false;  // Modo de edición
    private List<Group>? groups;

    [Parameter] public Group Group { get; set; }

    private void EnableEditMode()
    {
        isEditMode = true;
    }

    private async Task SaveChanges()
    {
        // Aquí puedes llamar al servicio de backend para guardar los cambios
        var response = await GroupsServices.UpdateGroupAsync(Group); // Supuesto método de servicio
        if (response)
        {
            isEditMode = false;
            // Mostrar mensaje de éxito o redirigir a otra página
        }
        else
        {
            // Manejar el error en la actualización
        }
    }
}
