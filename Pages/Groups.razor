@page "/Groups"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using riwi.Services;
@inject GroupsServices GroupsServices; 
@using riwi.Models;
@attribute [Authorize]

<PageTitle>Grupos</PageTitle>
@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error">@errorMessage</MudAlert>
}

<AuthorizeView>
    <Authorized>
        <MudContainer Class="d-flex flex-grow-1 flex-column ma-2">
            <!-- Botón y Agregar -->
            <MudContainer Class="d-flex justify-space-between flex-grow-1 gap-4 pa-3">
                <MudIconButton Href="/Home" Icon="@Icons.Material.Rounded.KeyboardArrowLeft" Color="Color.Secondary" Class="border-solid border-2 mud-border-secondary pa-2"></MudIconButton>
            </MudContainer>

            <!-- Total grupos -->
            <MudContainer Class="d-flex justify-space-between flex-grow-1 gap-4 pa-3 ma-2">
                <MudText Typo="Typo.h5">Total grupos:<b>@GroupsCount</b></MudText>
            </MudContainer>

            <!-- Grid de grupos -->
            <MudContainer Class="d-flex flex-grow-1 pa-3 ma-2">
                @if (_loading)
                {
                    <MudProgressLinear Indeterminate="true" Color="Color.Info" Class="my-7" />
                }
                else
                {
                    <MudDataGrid
                        Class="flex-grow-1 pa-2"
                        LoadingProgressColor="Color.Info"
                        Hover="true"
                        Items="@_groups" 
                        MultiSelection="true" 
                        QuickFilter="@_quickFilter">
                        <ToolBarContent>
                            <MudText Typo="Typo.h6">Periodic Elements</MudText>
                            <MudSpacer />
                            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                        </ToolBarContent>

                        <Columns>
                            <SelectColumn T="Group" />
                            <PropertyColumn Property="x => _groups.IndexOf(x) + 1" Title="Number" Sortable="false" Filterable="false" />
                            <PropertyColumn Property="x => x.Name" Title="Group Name" Sortable="true" />
                            <PropertyColumn Property="x => x.Created_At" Title="Creation Date" SortBy="@_sortBy" />
                            <PropertyColumn Property="x => x.Status" Title="Status" Sortable="true" />
                        </Columns>

                        <PagerContent>
                            <MudDataGridPager T="Group" />
                        </PagerContent>
                    </MudDataGrid>
                }
                
            </MudContainer>
            
        </MudContainer>
    </Authorized>
</AuthorizeView>

@code {
    private List<Group> _groups = new List<Group>();    
    private string _searchString;
    private bool _sortNameByLength;
    private bool _loading = true;
    private int GroupsCount => _groups?.Count ?? 0;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _groups = await GroupsServices.GetGroupsAsync() ?? new List<Group>();
            _groups = _groups.Where(g => g != null).ToList();
            Console.WriteLine($"Total grupos obtenidos: {_groups.Count}");        
        }
        catch (Exception ex)
        {
            errorMessage = "Hubo un error al cargar los grupos. Intente nuevamente más tarde.";
            Console.WriteLine($"Error al obtener grupos: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    // Filtro de busqueda
    private Func<Group, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return true;

        return MatchesSearchCriteria(x);
    };

    private bool MatchesSearchCriteria(Group group)
    {
        return (group.Name != null && group.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (group.Status != null && group.Status.Contains(_searchString, StringComparison.OrdinalIgnoreCase)) ||
               (group.Created_At != null && group.Created_At.ToString("dd-MM-yyyy").Contains(_searchString, StringComparison.OrdinalIgnoreCase));
    }

    // custom sort by name length
    private Func<Group, object> _sortBy => x =>
    {
        if (_sortNameByLength)
            return x.Name.Length;
        else
            return x.Name;
    };

    private Color GetChipColor(string? status)
    {
        return status switch
        {
            "Active" => Color.Success,
            "Inactive" => Color.Error,
            _ => Color.Default,
        };
    }
}
