@page "/Groups"
@using Microsoft.AspNetCore.Authorization;
@using Microsoft.AspNetCore.Components.Authorization;
@using riwi.Services;
@inject GroupsServices GroupsServices; 
@using riwi.Models;
@attribute [Authorize]

<PageTitle>Grupos</PageTitle>

<AuthorizeView>
    <Authorized>
        <MudContainer Class="d-flex flex-grow-1 flex-column">
            <!-- Botón y Agregar -->
            <MudContainer Class="d-flex justify-space-between flex-grow-1 gap-4 pa-3 ma-2">
                <MudIconButton Href="/Home" Icon="@Icons.Material.Rounded.KeyboardArrowLeft" Color="Color.Secondary" Class="border-solid border-2 mud-border-secondary pa-2"></MudIconButton>
                <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Rounded.PersonAdd" Color="Color.Secondary">Crear grupo</MudButton>
            </MudContainer>

            <!-- Total grupos -->
            <MudContainer Class="d-flex justify-space-between flex-grow-1 gap-4 pa-3 ma-2">
                <MudText Typo="Typo.h5">Total grupos: @GroupsCount</MudText>
            </MudContainer>
            <!-- Tabla de grupos -->
            <MudContainer Class="d-flex flex-grow-1 pa-3 ma-2">
                @if (_loading)
                {
                <MudProgressLinear  Indeterminate="true" Color="Color.Info" Class="my-7"/>
                }
                else
                {
                <MudTable Class="flex-grow-1" Items="@Group" LoadingProgressColor="Color.Info" Hover="true">
                    <HeaderContent>
                        <MudTh Class="text-center">#</MudTh> <!-- Contador -->
                        <MudTh Class="text-center"><MudTableSortLabel InitialDirection="SortDirection.None" SortBy="new Func<Group, object>(x=>x.Name)">Nombre</MudTableSortLabel></MudTh>
                        <MudTh Class="text-center"><MudTableSortLabel InitialDirection="SortDirection.None" SortBy="new Func< Group, object>(x=>x.Created_At)">Fecha Creación</MudTableSortLabel></MudTh>
                        <MudTh Class="text-center"><MudTableSortLabel InitialDirection="SortDirection.None" SortBy="new Func< Group, object>(x=>x.Status)">Estado</MudTableSortLabel></MudTh>
                        <MudTh Class="text-center">Opciones</MudTh>
                    </HeaderContent>
                    <RowTemplate Context="row">
                        <MudTd><b>@(Group.IndexOf(row) + 1)</b></MudTd> <!-- Mostrar el índice + 1 -->
                        <MudTd><b>@row.Name</b></MudTd>
                        <MudTd><b>@row.Created_At.ToString("dd-MM-yyyy")</b></MudTd>
                        <MudTd>
                            <MudChip T="string" Color="@GetChipColor(row.Status)" Variant="Variant.Filled" Size="Size.Small" Class="px-4">
                                @row.Status
                            </MudChip>
                        </MudTd>
                        <MudTd class="justify-center gap-2">
                                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Title="Editar" Color="Color.Secondary" Class="border-solid border-2 mud-border-secondary pa-1"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Outlined.RemoveRedEye" Title="Ver Detalles" Color="Color.Warning" Class="border-solid border-2 mud-border-warning pa-1"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Outlined.Delete" Color="Color.Error" Title="Eliminar" Class="border-solid border-2 mud-border-error pa-1"></MudIconButton>
                        </MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                                       RowsPerPageString="@rowsPerPageString"
                                       InfoFormat="@infoFormat"
                                       HideRowsPerPage="@hideRowsPerPage"
                                       HidePageNumber="@hidePageNumber"
                                       HidePagination="@hidePagination" />
                    </PagerContent>
                </MudTable>
                }
            </MudContainer>
        </MudContainer>
    </Authorized>
</AuthorizeView>

@code
{
    private List<Group>? Group;
    private bool _loading = true;
    
    // Propiedad para el contador de grupos
    private int GroupsCount => Group?.Count ?? 0;
    private bool hidePageNumber;
    private bool hidePagination;
    private bool hideRowsPerPage;
    private string rowsPerPageString = "Filas por página:";
    private string infoFormat = "{first_item}-{last_item} de {all_items}";
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Group = await GroupsServices.GetGroupsAsync();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }
    
    private Color GetChipColor(string? status)
    {
        return status switch
        {
            "Active" => Color.Success,
            "Inactive" => Color.Error,
            _ => Color.Default,
        };
    }
}
