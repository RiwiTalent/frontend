@namespace RTFrontend.Layout

@using Blazored.SessionStorage
@using Microsoft.AspNetCore.Components.Authorization
@using RTFrontend.Theme
@inherits LayoutComponentBase
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISessionStorageService SessionStorageService
@inject NavigationManager NavigationManager

<MudThemeProvider Theme="@_theme" IsDarkMode="_isDarkMode"></MudThemeProvider>
<MudLayout>
    <MudAppBar>
        <NavLink class="nav-link RTFrontend.image-content" href="/login-client" Match="NavLinkMatch.All">
            <img class="RTFrontend.image" src="images/RTFrontend.png"/>
        </NavLink>
        <MudSpacer/>
        <MudIconButton Icon="@(DarkLightModeButtonIcon)" Color="Color.Inherit" OnClick="@DarkModeToggle"/>
    </MudAppBar>
    <MudMainContent Fixed="true" Style="height: 100vw;">
        @Body
    </MudMainContent>
</MudLayout>

<CascadingBlazoredModal></CascadingBlazoredModal>

@code {
    private bool _drawerOpen = true;
    private bool _isDarkMode = false;
    private MudTheme? _theme = null;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        _theme = new()
        {
            PaletteLight = CustomMudTheme.PaletteLight,
            PaletteDark = CustomMudTheme.PaletteDark,
            LayoutProperties = new LayoutProperties()
        };
    }

    private void DarkModeToggle()
    {
        _isDarkMode = !_isDarkMode;
    }

    
    public string DarkLightModeButtonIcon => _isDarkMode switch
    {
        false => @Icons.Material.Outlined.WbSunny,
        true => Icons.Material.Outlined.DarkMode,
    };
    
    
}

<style>
    .RTFrontend.image {
        width: 103px;
        height: 30px;
    }
</style>