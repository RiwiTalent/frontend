@namespace riwi.Layout.Components
@using riwi.Models;
@using Microsoft.AspNetCore.Components.Authorization;
@using riwi.Services;
@inject AuthenticationStateProvider autenticacionProvider;
@inject AuthService AuthService;
@inject NavigationManager NavigationManager;
@inject HttpClient HttpClient;
@inject SweetAlertService Swal;
@inject AlertServices alertServices;

<head>
    <link rel="stylesheet" href="css/LoginComponent.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>



@*Integracion*@

<div class="main-container">
    <div class="secondary-container">
        <div class="login-card">
            <div class="card-content">
                <div class="text-center mb-3">
                    <img src="images/riwi.png" alt="Logo Riwi" class="riwi-logo" />
                
                </div>
                <h5 class="texto1">Bienvenido de nuevo</h5>
                <p class="texto2">Ingresa con tu cuenta para continuar</p>
                <MudForm Style="display: flex; align-items: center " Valid="IniciarSesion">
                    <br>
                    <p class="input-container form-group Login_contenedor_input">
                        <span class="correo_span">Correo</span>
                        <label for="Password" class="input-icon-container">
                            <img src="images/mail-filled.svg" alt="Icono de correo electronico" class="input-icon" />
                        </label>
                        <input type="text" placeholder="Ingresa tu correo electronico" @bind-value="email" name="Email" id="text" class="input-field" autocomplete="Email">
                    </p>
                    <br>
                    <p class="input-container form-group Login_contenedor_input">
                        <span class="Password_span">Contrase単a</span>
                        <label for="Password" class="input-icon-container">
                            <img src="images/lock.svg" alt="Icono de contrase単a" class="input-icon" />
                        </label>
                        <input type="@passwordInputType" placeholder="Ingresa tu contrase単a" @bind-value="password" name="Password" id="Password" class="input-field" autocomplete="Password">
                        <label for="Password" class="eye-icon-container end-icon" @onclick="TogglePasswordVisibility">
                            <img src="images/eye-off.svg" alt="Icono para ocultar/mostrar contrase単a" class="eye-icon" />
                        </label>
                    </p>

                    <div class="button-container">
                        <button type="button" class="btn mt-3 Ingresar" @onclick="Login">Ingresar</button>
                    </div>
                </MudForm>
            </div>
        </div>
        @* <button class="btn btn-primary" @onclick="SuccessSweetAlert">
            error!
        </button> *@
        <div class="image-container">
            <img src="images/fondo1.png" alt="Imagen de login" class="login-image" />
            <img src="images/fondo2.jpeg" alt="Imagen de login en celular" class="login-image-cel" />
            
        </div>
        
        <div class="image-container2">
            <img src="images/bg-10.svg" alt="Imagen de login en celular" class="login-image-grafico-cel" />
        </div>
    </div>
</div>

@code {
    private async Task SuccessSweetAlert()
    {
        await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error!",
                Text = "Do you want to continue",
                Icon = SweetAlertIcon.Error,
                ConfirmButtonText = "Cool"
            });
    }
    private string email;
    private string password;
    private string passwordInputType = "password"; // Inicialmente oculto

    private void TogglePasswordVisibility()
    {
        passwordInputType = passwordInputType == "password" ? "text" : "password"; // Alterna el tipo de input
    }

    private async Task Login()
    {

        var succes = await AuthService.Login(email, password);


        if (succes)
        {
            NavigationManager.NavigateTo("/home");
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Bienvenido!",
                Text = "continua",
                Icon = SweetAlertIcon.Success,
                ConfirmButtonText = "Cool",
                Timer = 1500
            });            
        }
        else
        {
            Console.WriteLine("No funciona");
            await Swal.FireAsync(new SweetAlertOptions
            {
                Title = "Error!",
                Text = "continua",
                Icon = SweetAlertIcon.Warning,
                ConfirmButtonText = "Cool",
                Timer = 1500
            });
        }
    }

}

