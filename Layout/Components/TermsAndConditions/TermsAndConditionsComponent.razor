@inject IModalService ModalService
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.Components
@using riwi.Models;
@using riwi.Services;

<BlazoredModalTitle>
    Términos y Condiciones
</BlazoredModalTitle>
<BlazoredModalContent>
    <p>Por favor, acepte los términos y condiciones para continuar.</p>
</BlazoredModalContent>
<BlazoredModalFooter>
    <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    <button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>
</BlazoredModalFooter>

@code {
    [Inject]
    private NavigationManager NavigationManager { get; set; }

    [Inject]
    private TermsAndConditionsService TermsService { get; set; } // Inyección del servicio

    [Parameter] public Group? group { get; set; }

   private async Task Aceptar()
{
    // Asegúrate de que el group no sea nulo
    if (group != null)
    {
        // Crear el modelo para los términos y condiciones
        var newTerms = new TermAndCondition
        {
            Clicked_Date = DateTime.Now,
            IsActive = true,
            Accepted = true,
            GroupId = group.Id // Asegúrate de usar el Id aquí
            @* AcceptedEmail = group.AssociateEmail, // Asegúrate de que este campo existe en tu modelo
            CreatorEmail = group.CreatedBy // Asegúrate de que este campo existe en tu modelo *@
        };

        // Llamar al servicio para aceptar los términos
        bool success = await TermsService.AcceptTermsAsync(newTerms);

        if (success)
        {
            // Cerrar el modal
            Console.WriteLine("Aceptó modal");
            NavigationManager.NavigateTo($"/HomeExterno/{group.Id}");
        }
        else
        {
            Console.WriteLine("No se pudo aceptar los términos y condiciones.");
        }
    }
    else
    {
        Console.WriteLine("Grupo no está disponible.");
    }
}


    private void Cancelar()
    {
        // Cerrar el modal sin hacer nada
        Console.WriteLine("Cerrado Modal");
        // Aquí puedes cerrar el modal si decides hacerlo
        // ModalService.Close(); // Opcional si decides cerrar el modal aquí
    }

    protected override Task OnInitializedAsync()
    {
        Console.WriteLine($"Group recibido en el modal: {group?.Name ?? "null"}");
        return base.OnInitializedAsync();
    }
}
