@inject IModalService ModalService
@using Blazored.Modal.Services
@using Microsoft.AspNetCore.Components
@inject GroupCodersServices _groupCodersServices
@inject TermsAndConditionsService _termsAndConditionsService
@inject NavigationManager NavigationManager
@using riwi.Models;
@using riwi.Services;

<BlazoredModalTitle>
    Términos y Condiciones
</BlazoredModalTitle>
<BlazoredModalContent>
    <p>Por favor, acepte los términos y condiciones para continuar.</p>
</BlazoredModalContent>
<BlazoredModalFooter>
    <button class="btn btn-secondary" @onclick="Cancelar">Cancelar</button>
    <button class="btn btn-primary" @onclick="Aceptar">Aceptar</button>
</BlazoredModalFooter>

@code {
    [Parameter]
    public string GroupId { get; set; }

    [Parameter]
    public string AcceptedEmail { get; set; }  // Agregar esta propiedad

    [Parameter]
    public string CreatorEmail { get; set; }  // Agregar esta propiedad

    private Group? group;  // Variable para almacenar los detalles del grupo

    protected override async Task OnInitializedAsync()
    {
        Console.WriteLine($"Group recibido en el modal: {group?.Name ?? "null"}, GroupId: {GroupId}");
        group = await _groupCodersServices.GetGroupInfoById(GroupId);

        Console.WriteLine($"Group AssociateEmail: {group?.AssociateEmail}, CreatedBy: {group?.CreatedBy}");
    }

    private async Task Aceptar()
    {
        if (group == null)
        {
            Console.WriteLine("El grupo no se pudo cargar.");
            return;
        }

        var newTerms = new TermAndCondition
        {
            IsActive = true,
            Accepted = true,
            GroupId = group.Id,
            AcceptedEmail = AcceptedEmail,  // Usar la propiedad correcta
            CreatorEmail = CreatorEmail  // Usar la propiedad correcta
        };

        Console.WriteLine($"AcceptedEmail: {newTerms.AcceptedEmail}, CreatorEmail: {newTerms.CreatorEmail}");

        bool success = await _termsAndConditionsService.AcceptTermsAsync(newTerms);

        if (success)
        {
            NavigationManager.NavigateTo($"/HomeExterno/{GroupId}");
        }
        else
        {
            Console.WriteLine("No se pudo aceptar los términos y condiciones.");
        }
    }

    private void Cancelar()
    {
        Console.WriteLine("Cerrado Modal");
    }
}
