@using riwi.Services
@using riwi.Models
@inject CoderService coderService

<div class="container-pagination">
    <div class="container-box">
        <MudPagination class="container-number" Variant="Variant.Filled" Color="Color.Primary" ShowPreviousButton="false" ShowNextButton="false" Count="@TotalPages" @bind-Selected="@CurrentPage"  Rectangular="true"></MudPagination>
    </div>
</div>

@code
{
    //variable to pagination
    private int CurrentPage = 1;
    private int TotalPages = 1;
    private int PageSize = 8;
    private List<Coder>? AllCoders;
    private List<Coder>? CurrentCoders;

    protected override async Task OnInitializedAsync()
    {
        await LoadCoders();
        UpdatePagination();
    }

    private async Task LoadCoders()
    {
        var AllCoders = await coderService.GetCodersAsync();
        TotalPages = (int)Math.Ceiling((double)(AllCoders?.Count ?? 0) / PageSize);
        UpdatePagination();
    }

    private void UpdatePagination()
    {
        if(AllCoders != null)
        {
            CurrentCoders = AllCoders.Skip((CurrentPage -1) * PageSize).Take(PageSize).ToList();
        }
    }

    private async Task PageChanged(int page)
    {
        CurrentPage = page;
        await LoadCoders();
    }   

}