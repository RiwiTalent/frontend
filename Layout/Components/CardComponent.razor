@using riwi.Services
@using riwi.Models
@inject CoderService coderService
@inject IModalService model


@*Filtrado*@
<MudPaper Class="filter-container" Elevation="1">
    <!-- Botón "Filtrar por" -->
    <button>
        <i class="fa fa-filter"></i> Filtrar por:
    </button>

    <!-- Campo para filtrar por FirstName -->
    <MudTextField @bind-Value="firstName" Label="FirstName" Class="mud-input" />

    <!-- Campo para filtrar por SecondName -->
    <MudTextField @bind-Value="firstLastName" Label="FirstLastName" Class="mud-input" />

    <!-- Campo para filtrar por Stack -->
    

    <!-- Campo para filtrar por Skills -->
    <InputSelect @bind-Value="skills" Class="search-container">
        <option value="">Seleccione Skill</option>
        <option value="JavaScript">JavaScript</option>
        <option value="C#">C#</option>
        <option value="Python">Python</option>
        <option value="Java">Java</option>
        <option value="Ruby">Ruby</option>
        <option value="PHP">PHP</option>
        <option value="React">React</option>
    </InputSelect>

    <!-- Campo para filtrar por Language Level -->
    <InputSelect @bind-Value="languageLevel" Class="search-container">
        <option value="">Seleccione Nivel de Lenguaje</option>
        <option value="A1">A1</option>
        <option value="A2">A2</option>
        <option value="B1">B1</option>
        <option value="B2">B2</option>
        <option value="C1">C1</option>
        <option value="C2">C2</option>
    </InputSelect>

    <!-- Botón para aplicar el filtro. -->
    <MudButton OnClick="FilterCoders" Variant="Variant.Filled" Color="Color.Primary" Class="filter-button">
        Filtrar
    </MudButton>

    <!-- Botón para limpiar filtros -->
    <MudButton OnClick="ClearFilters" Variant="Variant.Filled" Color="Color.Secondary" Class="filter-button">
        Limpiar
    </MudButton>
</MudPaper>

@if(coders != null)
{
    <div class="container-cards">
    
        @foreach(var coder in paginatedCoders)
        {
            <MudCard>
                @if(coder.Photo != null)
                {
                    <MudImage 
                            Src="@ImageNullOrEmpty(coder.Photo)" 
                            Alt="profile" 
                            />
                }
                else
                {
                    <p>Cargando...</p>
                }
                <MudCardContent>
                        <div class="profile-info">
                            <div class="container">
                                <div class="coder">
                                    <h3>@coder.FirstName @coder.FirstLastName</h3>
                                    <p>@coder.Stack</p>
                                </div>
                                    <a><img src="images/group-add.svg" alt="icon"></a>
                            </div>
                            @*badges*@
                            @if(coder.Skills != null)
                            {
                                <div class="badges">
                                    @for(int i = 0; i < coder.Skills.Count && i < 6; i++)
                                    {
                                        <div class="badge">@coder.Skills[i].Language_Programming</div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p>Contenido no disponible...</p>
                            }
                            @*Buttons*@
                            <div class="buttons">
                                <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>      
                            </div>
                        </div>
                </MudCardContent>
            </MudCard>
        }
    </div>

    <div class="container-pagination">
        <div class="container-box">
            <MudPagination class="container-number" Variant="Variant.Filled" Color="Color.Primary" ShowPreviousButton="false" ShowNextButton="false" PageSize="8"  TotalItems="@totalCoders" SelectedChanged="@OnPageChanged" Rectangular="true"></MudPagination>
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}
@* <MudButton @onclick="VerifyCoder">Verificar Api</MudButton> *@

@code
{
    public string ButtonDetails = "Detalle";
    private List<Coder>? coders;

    //paginación
    private List<Coder>? paginatedCoders;
    private int totalCoders;
    private int currentPage = 1;
    private int pageSize = 8;

    protected override async Task OnInitializedAsync()
    {
        //realizamos el llamado a la api
        try
        {
            coders = await coderService.GetCodersAsync();
            totalCoders = coders.Count;
            LoadCoders(currentPage);
            LoadCodersAsync();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private async Task LoadCodersAsync()
    {
        try
        {
            coders = await coderService.GetCodersAsync();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private async Task FilterCoders()
    {
        // Primero, cargamos la lista completa desde el servicio
        Console.WriteLine("HOLA");
        coders = await coderService.GetCodersAsync();

        // Aplicar filtro de FirstName
        if (!string.IsNullOrEmpty(firstName))
        {
            Console.WriteLine("Hola --- first name: " + firstName);
            coders = coders.Where(c => c.FirstName.Contains(firstName, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        // Aplicar filtro de LastName
        if (!string.IsNullOrEmpty(firstLastName))
        {   
            Console.WriteLine("LastName: " + firstLastName);
            coders = coders.Where(c => c.FirstLastName.Contains(firstLastName, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        // Aplicar filtro de Skills
        if (!string.IsNullOrEmpty(skills))
        {
            coders = coders.Where(c => c.Skills.Any(s => s.Language_Programming.Contains(skills, StringComparison.OrdinalIgnoreCase))).ToList();
        }

        // Aplicar filtro de Nivel de Lenguaje
        if (!string.IsNullOrEmpty(languageLevel))
        {
            coders = coders.Where(c => c.LanguageSkills != null && c.LanguageSkills.Language_Level.Equals(languageLevel, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        // Aplicar filtro de Stack
        if (!string.IsNullOrEmpty(stack))
        {
            coders = coders.Where(c => c.Stack != null && c.Stack.Contains(stack, StringComparison.OrdinalIgnoreCase)).ToList();
        }

            totalCoders = coders.Count;
            pag = (int)Math.Ceiling((double)totalCoders / pageSize);
            LoadCoders(currentPage);

        // Actualizar la UI para reflejar los cambios

        StateHasChanged();
    }


    private void LoadCoders(int pageNumber)
    {
        paginatedCoders = coders
                            .Skip((pageNumber - 1) * pageSize)
                            .Take(pageSize)
                            .ToList();
    }

    private void OnPageChanged(int pageNumber)
    {
        currentPage = pageNumber;
        LoadCoders(currentPage);
    }


    //Funcionalidad ver detalles
    private async Task ShowDetails(string id)
    {
        var coder = coders.FirstOrDefault(c => c.Id == id);
        if (coder != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalCoderDetails.Coder), coder);

            var modal = model.Show<ModalCoderDetails>("Detalles del Coder", parameters);
            await modal.Result;
        }
    }

    public void VerifyCoder()
    {
        if(coderService is null)
        {
            Console.WriteLine("No hay nada");
        }
        else{
            Console.WriteLine($"Existe un usuario {coders?.Count ?? 0}");
        }
    }

    //Lógica para renderizar imagen por defecto
    private string ImageNullOrEmpty(string? photo)
    {
        if(string.IsNullOrEmpty(photo))
        {
            return "images/Avatar1.png";
        }

        return photo;
    }
}