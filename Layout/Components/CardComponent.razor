@using riwi.Services
@using riwi.Models
@inject CoderService coderService
@inject IModalService model

@if(coders != null)
{
    <div class="container-cards">
    
        @foreach(var coder in paginatedCoders)
        {
            <MudCard>
                @if(coder.Photo != null)
                {
                    <MudImage 
                            Src="@ImageNullOrEmpty(coder.Photo)" 
                            Alt="profile" 
                            />
                }
                else
                {
                    <p>Cargando...</p>
                }
                <MudCardContent>
                        <div class="profile-info">
                            <div class="container">
                                <div class="coder">
                                    <h3>@coder.FirstName @coder.FirstLastName</h3>
                                    <p>@coder.Stack</p>
                                </div>
                                    <a><img src="images/group-add.svg" alt="icon"></a>
                            </div>
                            @*badges*@
                            @if(coder.Skills != null)
                            {
                                <div class="badges">
                                    @for(int i = 0; i < coder.Skills.Count && i < 6; i++)
                                    {
                                        <div class="badge">@coder.Skills[i].Language_Programming</div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p>Contenido no disponible...</p>
                            }
                            @*Buttons*@
                            <div class="buttons">
                                <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>      
                            </div>
                        </div>
                </MudCardContent>
            </MudCard>
        }
    </div>

    <div class="container-pagination">
        <div class="container-box">
            <MudPagination Variant="Variant.Filled"  ShowPreviousButton="false" ShowNextButton="false" Count="@pag" PageSize="@pageSize"  TotalItems="@totalCoders" SelectedChanged="@OnPageChanged" Rectangular="true" />
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>
}
@* <MudButton @onclick="VerifyCoder">Verificar Api</MudButton> *@

@code
{
    public string ButtonDetails = "Detalle";
    private List<Coder>? coders;

    //paginación
    private List<Coder>? paginatedCoders;
    private int totalCoders;
    private int currentPage = 1;
    private int pageSize = 8;

    private int pag;

    

    protected override async Task OnInitializedAsync()
    {
        //realizamos el llamado a la api
        try
        {
            coders = await coderService.GetCodersAsync();
            totalCoders = coders.Count;
            pag = (int)Math.Ceiling((double)totalCoders / pageSize);
            Console.WriteLine(pag);
            LoadCoders(currentPage);
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private void LoadCoders(int pageNumber)
    {
        paginatedCoders = coders
                            .Skip((pageNumber - 1) * pageSize)
                            .Take(pageSize)
                            .ToList();
    }

    private void OnPageChanged(int pageNumber)
    {
        currentPage = pageNumber;
        LoadCoders(currentPage);
    }
 

    //Funcionalidad ver detalles
    private async Task ShowDetails(string id)
    {
        var coder = coders.FirstOrDefault(c => c.Id == id);
        if (coder != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalCoderDetails.Coder), coder);

            var modal = model.Show<ModalCoderDetails>("Detalles del Coder", parameters);
            await modal.Result;
        }
    }

    public void VerifyCoder()
    {
        if(coderService is null)
        {
            Console.WriteLine("No hay nada");
        }
        else{
            Console.WriteLine($"Existe un usuario {coders?.Count ?? 0}");
        }
    }

    //Lógica para renderizar imagen por defecto
    private string ImageNullOrEmpty(string? photo)
    {
        if(string.IsNullOrEmpty(photo))
        {
            return "images/Avatar1.png";
        }

        return photo;
    }
}