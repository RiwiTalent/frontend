@using riwi.Services;
@using riwi.Models;
@inject CoderService coderService;
@inject IModalService model;

<head>
    <link rel="stylesheet" href="css/CardComponent.css">
</head>

<MudPaper Class="container-filter" Elevation="1">
    <MudPaper Elevation="0" Class="d-flex align-center">
        <MudText Class="text-resultado" Typo="Typo.h6">557 Resultados</MudText>
    </MudPaper>

    <MudPaper Elevation="0" Style="display: flex; justify-content: start; align-items: center; gap: 10px">
        <MudTextField @bind-Value="firstName" Placeholder="Buscar aqui.." Class="search" />
    </MudPaper>

    <MudPaper Elevation="0" Class="d-flex justify-space-around align-center container-select">
        <InputSelect @bind-Value="skills" Class="search-container">
            <option value="">Tecnologia</option>
            <option value="JavaScript">JavaScript</option>
            <option value="C#">C#</option>
            <option value="Python">Python</option>
            <option value="Java">Java</option>
            <option value="Ruby">Ruby</option>
            <option value="PHP">PHP</option>
            <option value="React">React</option>
        </InputSelect>
        <InputSelect @bind-Value="languageLevel" Class="search-container">
            <option value="">Nivel ingles</option>
            <option value="A1">A1</option>
            <option value="A2">A2</option>
            <option value="B1">B1</option>
            <option value="B2">B2</option>
            <option value="C1">C1</option>
            <option value="C2">C2</option>
        </InputSelect>
    </MudPaper>
</MudPaper>

@if (coders != null)
{
    <div class="cards">
        @foreach (var coder in paginatedCoders)
        {
            <MudCard>
                @if (coder.Photo != null)
                {
                    <MudImage
                        Src="@ImageNullOrEmpty(coder.Photo)"
                        Alt="profile" />
                }
                else
                {
                    <p>Cargando...</p>
                }
                <MudCardContent>
                    <div class="cards__container">
                        <div class="cards__profile">
                            <div class="cards__coder">
                                <h3>@coder.FirstName @coder.FirstLastName</h3>
                                <p>@coder.Stack</p>
                            </div>
                            <a>
                                <img src="images/group-add.svg" alt="icon">
                            </a>
                        </div>
                        @*badges*@
                        @if (coder.Skills != null)
                        {
                            <div class="cards__badges">
                                @for (int i = 0; i < coder.Skills.Count && i < 6; i++)
                                {
                                    <div class="cards__badge">@coder.Skills[i].Language_Programming</div>
                                }
                            </div>
                        }
                        else
                        {
                            <p>Contenido no disponible...</p>
                        }
                        @*Buttons*@
                        <div class="cards__button--primary">
                            <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>
                        </div>
                    </div>
                </MudCardContent>
            </MudCard>
        }
    </div>

    <div class="container-pagination">
        <div class="container-box">
            <MudPagination Variant="Variant.Filled" ShowPreviousButton="false" ShowNextButton="false" Count="@pag" PageSize="@pageSize" TotalItems="@totalCoders" SelectedChanged="@OnPageChanged" Rectangular="true" />
        </div>
    </div>
}
else
{
    <p>
        <em>Loading...</em>
    </p>
}

@if (coders != null)
{
    <div class="cardsCell">
        <MudCarousel TData="Coder" Class="mud-carousel" AutoCycle="false" CycleInterval="0" VisibleItems="2" Style="width: 100% ; display: flex; justify-content: center;">
            @foreach (var coder in paginatedCoders)
            {
                <MudCarouselItem>
                    <MudCard>
                        @if (coder.Photo != null)
                        {
                            <MudImage
                                Src="@ImageNullOrEmpty(coder.Photo)"
                                Alt="profile" />
                        }
                        else
                        {
                            <p>Cargando...</p>
                        }
                        <MudCardContent>
                            <div class="cards__container">
                                <div class="cards__profile">
                                    <div class="cards__coder">
                                        <h3>@coder.FirstName @coder.FirstLastName</h3>
                                        <p>@coder.Stack</p>
                                    </div>
                                    <a>
                                        <img src="images/group-add.svg" alt="icon" />
                                    </a>
                                </div>
                                @*badges*@
                                @if (coder.Skills != null)
                                {
                                    <div class="cards__badges">
                                        @for (int i = 0; i < coder.Skills.Count && i < 6; i++)
                                        {
                                            <div class="cards__badge">@coder.Skills[i].Language_Programming</div>
                                        }
                                    </div>
                                }
                                else
                                {
                                    <p>Contenido no disponible...</p>
                                }
                                @*Buttons*@
                                <div class="cards__button--primary">
                                    <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>
                                </div>
                            </div>
                        </MudCardContent>
                    </MudCard>
                </MudCarouselItem>
            }
        </MudCarousel>
    </div>
}

@code {
    public bool CheckBox1 { get; set; } = false;
    public bool CheckBox2 { get; set; } = false;
    public bool CheckBox3 { get; set; } = false;

    public string ButtonDetails = "Detalle";
    private List<Coder>? coders;

    //pagination
    private List<Coder>? paginatedCoders;
    private int totalCoders;
    private int currentPage = 1;
    private int pageSize = 8;
    private int pag;

    //filtrado
    private List<Coder>? filterCoder;

    // Variables para los filtros
    private string? firstName;
    private string? firstLastName;
    private string? skills;
    private string? languageLevel;
    private string? stack;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            coders = await coderService.GetCodersAsync();
            totalCoders = coders.Count;
            pag = (int)Math.Ceiling((double)totalCoders / pageSize);
            Console.WriteLine(pag);
            LoadCoders(currentPage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private async Task LoadCodersAsync()
    {
        try
        {
            coders = await coderService.GetCodersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private void OnPageChanged(int pageNumber)
    {
        currentPage = pageNumber;
        LoadCoders(currentPage);
    }

    private async Task FilterCoders()
    {
        coders = await coderService.GetCodersAsync();

        if (!string.IsNullOrEmpty(firstName))
        {
            coders = coders.Where(c => c.FirstName.Contains(firstName, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (!string.IsNullOrEmpty(firstLastName))
        {
            coders = coders.Where(c => c.FirstLastName.Contains(firstLastName, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (!string.IsNullOrEmpty(skills))
        {
            coders = coders.Where(c => c.Skills.Any(s => s.Language_Programming.Contains(skills, StringComparison.OrdinalIgnoreCase))).ToList();
        }

        if (!string.IsNullOrEmpty(languageLevel))
        {
            coders = coders.Where(c => c.LanguageSkills != null && c.LanguageSkills.Language_Level.Equals(languageLevel, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        if (!string.IsNullOrEmpty(stack))
        {
            coders = coders.Where(c => c.Stack != null && c.Stack.Contains(stack, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        totalCoders = coders.Count;
        pag = (int)Math.Ceiling((double)totalCoders / pageSize);
        LoadCoders(currentPage);

        StateHasChanged();
    }

    private async Task ClearFilters()
    {
        firstName = "";
        firstLastName = "";
        skills = "";
        languageLevel = "";
        stack = "";

        coders = await coderService.GetCodersAsync();
        totalCoders = coders.Count;
        pag = (int)Math.Ceiling((double)totalCoders / pageSize);

        currentPage = 1;
        LoadCoders(currentPage);

        StateHasChanged();
    }

    private void LoadCoders(int pageNumber)
    {
        paginatedCoders = coders
            ?.Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private string ImageNullOrEmpty(string? src)
    {
        return string.IsNullOrEmpty(src) ? "images/defaultProfile.svg" : src;
    }

    private void ShowDetails(string coderId)
    {
        // Lógica para mostrar detalles del coder
    }
}
