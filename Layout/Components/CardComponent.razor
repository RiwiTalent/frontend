@using riwi.Services;
@using riwi.Models;
@inject CoderService coderService;
@inject IModalService model;

<head>
    <link rel="stylesheet" href="css/CardComponent.css">
</head>

<MudPaper Class="container-filter" Elevation="1">
    <MudPaper Elevation="0" Class="d-flex align-center">
        @* <MudText Class="text-resultado" Typo="Typo.h6">@coders.Count Coders</MudText> *@
        <MudText Class="text-resultado" Typo="Typo.h6">@totalCoders Coders</MudText>
    </MudPaper>

    <MudButton OnClick="CleanFilters" Class=""> Limpiar </MudButton>

    <MudButton Color="Color.Primary" OnClick="FilterCoders" Class=""> Filtrar </MudButton>

    <MudPaper Elevation="0" Style="display: flex; justify-content: start; align-items: center; gap: 10px">
        <MudTextField StartIcon="@Icons.Material.Filled.Delete" @bind-Value="searchText" Placeholder="Buscar aquí..." Class="search" Immediate="true" TextChanged="FilterCoders" />
    </MudPaper>
    

    <MudPaper Elevation="0" Class="d-flex justify-space-around align-center container-select">
        
        <InputSelect @bind-Value="status" Class="search-container" >
            <option value="">Estado</option>
            <option value="Active">Activo</option>
            <option value="Grouped">Agrupado</option>
            <option value="Selected">Seleccionado</option>
        </InputSelect>
        

        <InputSelect @bind-Value="skills" Class="search-container" @onchange="CleanFilterSkill">
            <option value="">Tecnologia</option>
            <option value="JavaScript">JavaScript</option>
            <option value="CSharp">CSharp</option>
            <option value="Python">Python</option>
            <option value="Java">Java</option>
            <option value="Ruby">Ruby</option>
            <option value="PHP">PHP</option>
            <option value="React">React</option>
            <option value="clear">Limpiar Filtro</option> <!-- Opción para limpiar -->
        </InputSelect>

        <InputSelect @bind-Value="languageLevel" Class="search-container" @onchange="CleanFilterEnglishLevel">
            <option value="">Nivel inglés</option>
            <option value="A1">A1</option>
            <option value="A2">A2</option>
            <option value="B1">B1</option>
            <option value="B2">B2</option>
            <option value="C1">C1</option>
            <option value="C2">C2</option>
            <option value="clear">Limpiar Filtro</option> <!-- Opción para limpiar -->
        </InputSelect>

    </MudPaper>
</MudPaper>

@*Aqui se muestran los coders seleccionados*@
<MudPaper Height="200px" Style="overflow:hidden; position:relative;">
    <MudDrawerContainer>
        <MudDrawer @bind-Open="@_open" Anchor="Anchor.End" Fixed="false" Elevation="1" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true">
            <MudNavMenu>
                    <MudChipSet T="string" AllClosable OnClose="RemoveCoderFromGroup">
                        @foreach (var selectedCoder in selectedCoders)
                        {
                            
                            <MudChip Text="@($"{selectedCoder.FirstName} {selectedCoder.FirstLastName}")">
                            <AvatarContent>
                                <MudAvatar>
                                    <MudImage Src="@selectedCoder.Photo"></MudImage>
                                </MudAvatar>
                            </AvatarContent>
                            </MudChip> 
                        }
                    </MudChipSet>

                    <MudPaper Elevation="0" Style="display: flex; justify-content: start; align-items: center; gap: 10px">
                        <MudTextField @bind-Value="groupId" Placeholder="ingresa aqui el id del grupo" />
                    </MudPaper>

                    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="AddCodersToGroupAsync">
                        agregar coders
                    </MudButton>
                    
            </MudNavMenu>
        </MudDrawer>
        <div class="d-flex justify-center align-center mud-height-full">
            <MudButton OnClick="@ToggleDrawer" Color="Color.Primary">Toggle</MudButton>
        </div>
    </MudDrawerContainer>
</MudPaper>



@if(coders != null)
{
    <div class="cards">
        @foreach (var coder in paginatedCoders)
        {
            <MudCard>
                @if (coder.Photo != null)
                {
                    <MudImage Fluid="true"
                    ObjetctFit="Cover" Src="@ImageNullOrEmpty(coder.Photo)" Alt="Mony the dog" Width="250" Height="300"/>

                    @* <MudImage class=""
                            Src="@ImageNullOrEmpty(coder.Photo)" 
                            Alt="profile" 
                    </MudImage> *@
                }
                else
                {
                    <p>Cargando...</p>
                }
                <MudCardContent>
                        <div class="cards__container">

                        <MudContainer Class="d-flex justify-end flex-grow-1">
                                <MudChipSet T="string" @bind-SelectedChips="selectedCoders" SelectionMode="SelectionMode.MultiSelection" CheckMark>
                                    <MudChip Class="border-solid border-2 mud-b mud-border-white" Icon="@Icons.Material.Rounded.PersonAddAlt1" Variant="Variant.Text" Color="Color.Secondary"  @onclick="() => AddCoderToGroup(coder)">
                                    </MudChip>
                                </MudChipSet>
                            </MudContainer>
                            <div class="cards__profile">
                                <div class="cards__coder">
                                    <h6 class="">@coder.FirstName @coder.FirstLastName</h6>
                                    <p>@coder.Stack</p>
                                </div>
                                    @* <a><img src="images/group-add.svg" alt="icon"></a> *@
                            </div>
                            @*badges*@
                            @if(coder.Skills != null)
                            {
                                <div class="cards__badges">
                                    @for(int i = 0; i < coder.Skills.Count && i < 6; i++)
                                    {
                                        <div class="cards__badge">@coder.Skills[i].Language_Programming</div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p>Contenido no disponible...</p>
                            }
                            @*Buttons*@
                            <div class="cards__button--primary">
                                <MudButton style="background: #fff; width: 100%;" Variant="Variant.Filled" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>      
                            </div>
                        </div>
                </MudCardContent>
            </MudCard>
        }
    </div>

    <div class="container-pagination">
        <div class="container-box">
            <MudPagination Variant="Variant.Filled" ShowPreviousButton="false" ShowNextButton="false" Count="@pag" PageSize="@pageSize" TotalItems="@totalCoders" SelectedChanged="@OnPageChanged" Rectangular="true" />
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>

}


@code
{
    public bool CheckBox1 { get; set; } = false;
    public bool CheckBox2 { get; set; } = false;
    public bool CheckBox3 { get; set; } = false;

    public string ButtonDetails = "Detalle";
    private List<Coder>? coders;

    //pagination
    private List<Coder>? paginatedCoders;
    private int totalCoders;
    private int currentPage = 1;
    private int pageSize = 8;
    private int pag;

    //filtrado
    private List<Coder>? filterCoder;

    // Filtros
    private string? searchText;
    private string? skills;
    private string? languageLevel;
    private bool FilterApplied = false;
    private string? status;
    private List<Coder> selectedCoders = new(); // Lista de programadores seleccionados

    private string groupId;

    private bool _open = false;




    private void ToggleDrawer()
    {
        _open = !_open;
    } 

    // Método para agregar un programador al grupo
    public void AddCoderToGroup(Coder coder)
    { 
        if (!selectedCoders.Contains(coder))
        {
            selectedCoders.Add(coder); // Agregar el coder a la lista de seleccionados
        }
    }    // Método para eliminar un programador del grupo cuando se cierra un chip
    public void RemoveCoderFromGroup(MudChip<string> chip)
    {
        var coderToRemove = selectedCoders.FirstOrDefault(c => $"{c.FirstName} {c.FirstLastName}" == chip.Text);
        if (coderToRemove != null)
        {
            selectedCoders.Remove(coderToRemove); // Eliminar el coder de la lista de seleccionados
        }
    }    // Método Add que ya tienes (puedes adaptarlo si es necesario)
    private int _i = 1;
    private List<string> _values = new();
    public void Add() => _values.Add("Value " + (_i++));


    private async Task AddCodersToGroupAsync()

    { 
        Console.WriteLine("agragando coders a grupo");
        if (string.IsNullOrEmpty(groupId) || selectedCoders.Count == 0)
        {
            // Verificar si hay ID de grupo o programadores seleccionados
            Console.WriteLine("Debes ingresar un ID de grupo y seleccionar coders.");
            return;
        }

        // Preparar la data a enviar al backend
        var data = new
        {
            GroupId = groupId,
            CoderList = selectedCoders.Select(c => c.Id).ToList() // Cambiado a CoderList s
        };


        try
        {
            // Realizar la llamada HTTP POST al backend
            Console.WriteLine("llamada HTTP POST al backend");
            Console.WriteLine(selectedCoders);

                var response = await Http.PostAsJsonAsync("http://localhost:5113/coders/grouped", data);
                
                if (response.IsSuccessStatusCode)
                {
                    Console.WriteLine("Coders agregados correctamente al grupo.");
                    
                }
                else
                {
                    Console.WriteLine($"Error al agregar los coders: {response.StatusCode}");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Ocurrió un error: {ex.Message}");
            }
        }
    
    

    protected override async Task OnInitializedAsync()
    {
        //Llamado a la api
        try
        {
            coders = await coderService.GetCodersAsync();
            totalCoders = coders.Count;
            pag = (int)Math.Ceiling((double)totalCoders / pageSize);
            Console.WriteLine(pag);
            LoadCoders(currentPage);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private async Task LoadCodersAsync()
    {
        try
        {
            coders = await coderService.GetCodersAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private void OnPageChanged(int pageNumber)
    {
        currentPage = pageNumber;
        LoadCoders(currentPage);
    }
    

    private async Task FilterCoders()
    {
        coders = await coderService.GetCodersAsync();

        // Filtrar por nombres o apellidos
        if (!string.IsNullOrEmpty(searchText))
        {
            var searchTerms = searchText.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            coders = coders.Where(c =>
            {
                var fullName = $"{c.FirstName} {c.SecondName} {c.FirstLastName} {c.SecondLastName}".ToLower();
                return searchTerms.All(term => fullName.Contains(term.ToLower()));
            }).ToList();
            FilterApplied = true;
        }

        // Filtro de Skills
        if (!string.IsNullOrEmpty(skills))
        {
            coders = coders.Where(c => c.Skills.Any(s => s.Language_Programming.Contains(skills, StringComparison.OrdinalIgnoreCase))).ToList();
        }

        // Filtro de Nivel de Lenguaje
        if (!string.IsNullOrEmpty(languageLevel))
        {
            coders = coders.Where(c => c.LanguageSkills != null && c.LanguageSkills.Language_Level.Equals(languageLevel, StringComparison.OrdinalIgnoreCase)).ToList();
            FilterApplied = true;
        }
         // Filtro por Status
        if (!string.IsNullOrEmpty(status) && status.ToLower() != "clear")
        {
            coders = coders.Where(c => c.Status != null && c.Status.Equals(status, StringComparison.OrdinalIgnoreCase)).ToList();
            FilterApplied = true;
        }
        

        totalCoders = coders.Count;
        pag = (int)Math.Ceiling((double)totalCoders / pageSize);
        LoadCoders(currentPage);
        StateHasChanged();
    }

    private async Task CleanFilters()
    {
        searchText = "";
        skills = "";
        languageLevel = "";
        status = "";

        coders = await coderService.GetCodersAsync();
        totalCoders = coders.Count;
        pag = (int)Math.Ceiling((double)totalCoders / pageSize);

        currentPage = 1;
        LoadCoders(currentPage);
        StateHasChanged();
    }

    private async Task CleanFilterSkill(ChangeEventArgs e)
    {
        if (e.Value?.ToString() == "clear")
        {
            skills = "";  // Resetea el valor de skills
            await FilterCoders();  // Aplica los filtros
        }
        
    }

    private async Task CleanFilterEnglishLevel(ChangeEventArgs e)
    {
        if (e.Value?.ToString() == "clear")
        {
            languageLevel = "";  // Resetea el valor de languageLevel
            await FilterCoders();  // Aplica los filtros
        }
    }

    private async Task CleanFilterStatus(ChangeEventArgs e)
    {
        if (e.Value?.ToString()== "clear")
        {
            status = "";
            await FilterCoders();
        }
    }


    private void LoadCoders(int pageNumber)
    {
        paginatedCoders = coders
            ?.Skip((pageNumber - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    //Funcionalidad ver detalles
    private async Task ShowDetails(string id)
    {
        var coder = coders.FirstOrDefault(c => c.Id == id);
        if (coder != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalCoderDetails.Coder), coder);

            var modal = model.Show<ModalCoderDetails>("", parameters);
            await modal.Result;
        }
    }
    
    //Lógica para renderizar imagen por defecto
    private string ImageNullOrEmpty(string? photo)
    {
        if(string.IsNullOrEmpty(photo))
        {
            return "images/Avatar1.png";
        }

        return photo;
    }
}