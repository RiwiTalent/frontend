@using riwi.Services;
@using riwi.Models;
@inject HttpClient HttpClient;
@inject CoderService coderService;
@inject IModalService model;
@using System.Net.Http.Json;
@inject IDialogService DialogService;
<head>
    <link rel="stylesheet" href="css/CardComponent.css">
</head>

<!-- DialogUsageExample_Dialog.razor -->
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        <h3>Título del Diálogo</h3>
        <p>Este es el contenido de tu diálogo.</p>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">Cerrar</MudButton>
    </DialogActions>
</MudDialog>

@code {
    @code {
    private void Close()
    {
        DialogService.Close(null); // Puedes pasar un valor específico aquí si lo necesitas
    }
}

}





<MudPaper Class="container-filter" Elevation="1">
    <MudPaper Elevation="0" Class="d-flex align-center">
        <MudText Class="text-resultado" Typo="Typo.h6">557 Resultados</MudText>
    </MudPaper>
     <MudButton OnClick="FilterCoders" Class=""> filtrar </MudButton>

    <MudPaper Elevation="0" Style="display: flex; justify-content: start; align-items: center; gap: 10px">
        <MudTextField @bind-Value="searchText" Placeholder="Buscar aquí por nombre o apellido..." Class="search" Immediate="true" TextChanged="FilterCoders" />
    </MudPaper>
    
    <MudPaper Elevation="0" Class="d-flex justify-space-around align-center container-select">
        <InputSelect @bind-Value="skills" Class="search-container">
            <option value="">Tecnologia</option>
            <option value="JavaScript">JavaScript</option>
            <option value="C#">C#</option>
            <option value="Python">Python</option>
            <option value="Java">Java</option>
            <option value="Ruby">Ruby</option>
            <option value="PHP">PHP</option>
            <option value="React">React</option>
        </InputSelect>
        <InputSelect @bind-Value="languageLevel" Class="search-container">
            <option value="">Nivel ingles</option>
            <option value="A1">A1</option>
            <option value="A2">A2</option>
            <option value="B1">B1</option>
            <option value="B2">B2</option>
            <option value="C1">C1</option>
            <option value="C2">C2</option>
        </InputSelect>
    </MudPaper>
</MudPaper>




@if(coders != null)
{
    <div class="cards">
    
        @foreach(var coder in paginatedCoders)
        {
            <MudCard>
                @if(coder.Photo != null)
                {
                    <MudImage Fluid="true"
                    ObjetctFit="Cover" Src="@ImageNullOrEmpty(coder.Photo)" Alt="Mony the dog" Width="250" Height="300"/>

                    @* <MudImage class=""
                            Src="@ImageNullOrEmpty(coder.Photo)" 
                            Alt="profile" 
                    </MudImage> *@
                }
                else
                {
                    <p>Cargando...</p>
                }
            <MudCardContent>
                <!-- Contenedor principal -->
                <div class="cards__container">
                    <div class="cards__profile">
                        <!-- Muestra la información básica del coder -->
                        <h3>@coder.FirstName @coder.FirstLastName</h3>
                        <p>@coder.Stack</p>
                        @* <a><img src="images/group-add.svg" alt="icon" @onclick="() => AddCoderToSelection(coder)"></a> *@

                        <MudChipSet @bind-SelectedValues="_selected" SelectionMode="SelectionMode.MultiSelection" CheckMark>
                            <MudChip Value="@("Milk")" />
                    </MudChipSet>
                    </div>
                </div>
                <!-- Botón para abrir el modal con los coders seleccionados -->
                <MudButton Variant="Variant.Filled" OnClick="OpenModal">Ver Coders Seleccionados</MudButton>
            </MudCardContent>

            @code {
            private IReadOnlyCollection<string> _selected = ["Milk", "Cornflakes"];
                }


        





                <!-- Modal que lista los coders seleccionados -->
                <MudDialog @bind-IsOpen="_isModalOpen">
                    <DialogContent>
                        <!-- Campo de búsqueda de grupos -->
                        <MudTextField @bind-Value="groupSearchTerm" Placeholder="Buscar Grupo..." Immediate="true" @oninput="SearchGroup"/>

                        <!-- Lista de coders seleccionados -->
                        @if(selectedCoders.Count > 0)
                        {
                        <MudTable T="Coder">
                            @foreach(var coder in selectedCoders)
                            {
                                <MudTr>
                                    <MudTd><img src="@coder.Photo" alt="Coder photo" style="width: 50px; height: 50px;" /></MudTd>
                                    <MudTd>@coder.FirstName @coder.FirstLastName @coder.SecondLastName</MudTd>
                                    <MudTd>
                                        <MudButton Color="Color.Error" OnClick="() => RemoveCoderFromSelection(coder)">-</MudButton>
                                    </MudTd>
                                </MudTr>
                            }
                        </MudTable>

                        }
                        else
                        {
                            <p>No hay coders seleccionados</p>
                        }

                        <!-- Botón para agregar los coders seleccionados al grupo -->
                        <MudButton OnClick="AddCodersToGroup" Disabled="@(!selectedGroupId.HasValue)">
                            Agregar al Grupo
                        </MudButton>
                    </DialogContent>
                </MudDialog>

            </MudCard>
        }
    </div>

    <div class="container-pagination">
        <div class="container-box">
            <MudPagination Variant="Variant.Filled"  ShowPreviousButton="false" ShowNextButton="false" Count="@pag" PageSize="@pageSize"  TotalItems="@totalCoders" SelectedChanged="@OnPageChanged" Rectangular="true" />
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>

}






@code
{
    public bool CheckBox1 { get; set; } = false;
    public bool CheckBox2 { get; set; } = false;
    public bool CheckBox3 { get; set; } = false;
    
    
    public string ButtonDetails = "Detalle";
    private List<Coder>? coders;

    //pagination
    private List<Coder>? paginatedCoders;
    private int totalCoders;
    private int currentPage = 1;
    private int pageSize = 8;
    private int pag;

    //filtrado
    //Lista para guardar los coder filtrados
    private List<Coder>? filterCoder;

    // Variables para los filtros
    private string? firstName;
    private string? firstLastName;
    private string? skills;
    private string? languageLevel;
    private string? secondLastName;
    private string? secondName;

    private string? searchText;

    private bool FilterApplied = false;



    

    protected override async Task OnInitializedAsync()
    {
        //realizamos el llamado a la api
        try
        {
            coders = await coderService.GetCodersAsync();
            totalCoders = coders.Count;
            pag = (int)Math.Ceiling((double)totalCoders / pageSize);
            Console.WriteLine(pag);
            LoadCoders(currentPage);
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private async Task LoadCodersAsync()
    {
        try
        {
            coders = await coderService.GetCodersAsync();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }


    private void OnPageChanged(int pageNumber)
    {
        currentPage = pageNumber;
        LoadCoders(currentPage);
    }

    private async Task FilterCoders()
    {
    // Primero, cargamos la lista completa desde el servicio
    Console.WriteLine("Aplicando filtros");
    coders = await coderService.GetCodersAsync();

    // Filtrar por nombres o apellidos (FirstName, SecondName, FirstLastName, SecondLastName)
    if (!string.IsNullOrEmpty(searchText))
    {
        var searchTerms = searchText.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        Console.WriteLine("Filtrando por nombres o apellidos...");

        coders = coders.Where(c =>
        {
            var fullName = $"{c.FirstName} {c.SecondName} {c.FirstLastName} {c.SecondLastName}".ToLower();

            // Verificar todas las combinaciones posibles
            bool isMatch = searchTerms.All(term =>
                $"{c.FirstName} {c.SecondName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.FirstLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.SecondName} {c.FirstLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.SecondName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstLastName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.SecondName} {c.FirstLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.SecondName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.FirstLastName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.SecondName} {c.FirstLastName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.SecondName} {c.FirstLastName} {c.SecondLastName}".ToLower().Contains(term.ToLower())
            );
            FilterApplied = true;
            return isMatch;
        }).ToList();
    }

    // Aplicar filtro de Skills
    if (!string.IsNullOrEmpty(skills))
    {
        coders = coders.Where(c => c.Skills.Any(s => s.Language_Programming.Contains(skills, StringComparison.OrdinalIgnoreCase))).ToList();
    }
    // Aplicar filtro de Nivel de Lenguaje
    if (!string.IsNullOrEmpty(languageLevel))
    {
        coders = coders.Where(c => c.LanguageSkills != null && c.LanguageSkills.Language_Level.Equals(languageLevel, StringComparison.OrdinalIgnoreCase)).ToList();
        FilterApplied = true;
    }

    totalCoders = coders.Count;
    pag = (int)Math.Ceiling((double)totalCoders / pageSize);
    LoadCoders(currentPage);

    // Actualizar la UI para reflejar los cambios
    StateHasChanged();
    }






    private async Task ClearFilters()
    {
        // Limpia los valores de los filtros
        Console.WriteLine("Limpiaste");
            // Limpia los valores de los filtros
        firstName = "";
        firstLastName = "";
        skills = "";
        
        languageLevel = "";
        
        // Recarga la lista completa de coders sin filtros de manera asíncrona
        coders = await coderService.GetCodersAsync();

        // Actualiza el total de coders y las páginas
        totalCoders = coders.Count;
        pag = (int)Math.Ceiling((double)totalCoders / pageSize);

        // Carga la primera página después de limpiar los filtros
        currentPage = 1;
        LoadCoders(currentPage);

        // Actualiza la UI
        StateHasChanged();
    }


    private void LoadCoders(int pageNumber)
    {
        paginatedCoders = coders
                            .Skip((pageNumber - 1) * pageSize)
                            .Take(pageSize)
                            .ToList();
    }




    //Funcionalidad ver detalles
    private async Task ShowDetails(string id)
    {
        var coder = coders.FirstOrDefault(c => c.Id == id);
        if (coder != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalCoderDetails.Coder), coder);

            var modal = model.Show<ModalCoderDetails>("", parameters);
            await modal.Result;
        }
    }


    //Lógica para renderizar imagen por defecto
    private string ImageNullOrEmpty(string? photo)
    {
        if(string.IsNullOrEmpty(photo))
        {
            return "images/Avatar1.png";
        }

        return photo;
    }


/*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-**/

    private bool _isModalOpen = false;
    private List<Coder> selectedCoders = new List<Coder>();
    private string groupSearchTerm = string.Empty;
    private int? selectedGroupId;

    // Método para agregar un coder a la lista seleccionada
    private async Task AddCoderToSelection(Coder coder)
    
        
        {  Console.WriteLine("Selecionado");
            if (!selectedCoders.Contains(coder))
            {
                selectedCoders.Add(coder);
            }
        }

        // Método para quitar un coder de la lista seleccionada (solo frontend)
    private void RemoveCoderFromSelection(Coder coder)
        {
            selectedCoders.Remove(coder);
        }

        // Método para abrir el modal
        private void OpenModal()
        {
            _isModalOpen = true;
        }

        // Método para buscar un grupo basado en el término ingresado
        private async Task SearchGroup()
        {
            // Aquí se realizaría la búsqueda del grupo por nombre a través de un servicio
            // y se asignaría el grupo seleccionado a `selectedGroupId`.
        }

    // Método para agregar los coders al grupo seleccionado
    private async Task AddCodersToGroup()
    {
        if (selectedGroupId.HasValue)
        {
            // Llamar al endpoint para agregar los coders al grupo
            await HttpClient.PostAsJsonAsync($"/api/groups/{selectedGroupId}/coders", selectedCoders.Select(c => c.Id));
            
            // Limpiar la selección después de agregar al grupo
            selectedCoders.Clear();
            _isModalOpen = false;
        }
    }
}