@using riwi.Layout.Components.Modal
@using riwi.Services;
@using riwi.Models;
@using MudBlazor;
@inject CoderService coderService
@inject IModalService model
@using riwi.Theme;
@inject IDialogService DialogService


@*Filtrado - Coder*@
<MudPaper Class="filter-container d-flex justify-space-around  align-center" Style="@($"background-color: {RiwiPalette.NeutralWhite};")">
    
        <!-- Botón "Filtrar por" -->
    @* <MudButton OnClick="FilterCoders" Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FilterList" 
            Style="@($"background-color: {RiwiPalette.Secondary500};")" Size="Size.Small">
        Filtrar
    </MudButton> *@

    <MudText Typo="Typo.h6">557 
        <span class="contenedor--search-span">Resultados</span>
    </MudText>

    @* Variant="Variant.Outlined"  *@


    <MudPaper>
    <!-- Contenido aquí -->
        <MudText StartIcon="@Icons.Material.Rounded.Search"></MudText>
        <MudInput T="string"  Label="Buscar aquì" @bind-Value="firstLastName"
        Style="@($"color: {RiwiPalette.Primary500};")" />
    </MudPaper>

    
    <MudPaper class="container__filter_selects">

        <!-- Campo para filtrar por Skills -->
        <InputSelect @bind-Value="skills" class="filter-container__select" placeholder="Buscar aquì">
            <option value="">Tecnologia</option>
            <option value="JavaScript">JavaScript</option>
            <option value="C#">C#</option>
            <option value="Python">Python</option>
            <option value="Java">Java</option>
            <option value="Ruby">Ruby</option>
            <option value="PHP">PHP</option>
            <option value="React">React</option>
            <option>
            <MudButton OnClick="ClearFilters" Variant="Variant.Filled" Color="Color.Secondary" Class="filter-button">
                X Limpiar
            </MudButton>
            </option>
        </InputSelect>


        <!-- Campo para filtrar por Language Level -->
        <InputSelect @bind-Value="languageLevel" class="filter-container__select">
            <option value=""> Nivel inglès</option>
            <option value="A1">A1</option>
            <option value="A2">A2</option>
            <option value="B1">B1</option>
            <option value="B2">B2</option>
            <option value="C1">C1</option>
            <option value="C2">C2</option>
            <option>
                <MudButton OnClick="ClearFilters" Variant="Variant.Filled" Color="Color.Secondary" Class="filter-button">
                X Limpiar
                </MudButton>
            </option>
                
                
        </InputSelect>

    </MudPaper>

    

    <!-- Botón para aplicar el filtro. -->
    @* <MudButton OnClick="FilterCoders" Variant="Variant.Filled" Color="Color.Primary" Class="filter-button">
        Filtrar
    </MudButton> *@

    <!-- Botón para limpiar filtros -->
    @* <MudButton OnClick="ClearFilters" Variant="Variant.Filled" Color="Color.Secondary" Class="filter-button">
        Limpiar
    </MudButton> *@
</MudPaper>



@* new *@
<MudPaper Height="200px" Style="overflow:hidden; position:relative;">
    <MudDrawerContainer>
        <MudDrawer @bind-Open="@_open" Anchor="Anchor.End" Fixed="false" Elevation="1" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true">
            <MudNavMenu>
                    <MudChipSet T="string" AllClosable OnClose="RemoveCoderFromGroup">
                        @foreach (var selectedCoder in _selectedCoders)
                        {
                            
                            <MudChip Text="@($"{selectedCoder.FirstName} {selectedCoder.FirstLastName}")">
                            <AvatarContent>
                                <MudAvatar>
                                    <MudImage Src="@selectedCoder.Photo"></MudImage>
                                </MudAvatar>
                            </AvatarContent>
                            </MudChip> 
                        }
                    </MudChipSet>

                    <MudButton @onclick="OpenDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
                        Open Dialog
                    </MudButton>
                    
                    
                
            </MudNavMenu>
        </MudDrawer>
        <div class="d-flex justify-center align-center mud-height-full">
            <MudButton OnClick="@ToggleDrawer" Color="Color.Primary">Toggle</MudButton>
        </div>
    </MudDrawerContainer>
</MudPaper>





@if(coders != null)
{
    <div class="cards">
    
        @foreach(var coder in paginatedCoders)
        {
            <MudCard>
                @if(coder.Photo != null)
                {
                    <MudImage class=""
                            Src="@ImageNullOrEmpty(coder.Photo)" 
                            Alt="profile" 
                            />
                }
                else
                {
                    <p>Cargando...</p>
                }
                <MudCardContent>
                    <div class="cards__container">
                        <MudContainer Class="d-flex justify-end flex-grow-1">
                            <MudChipSet T="string" @bind-SelectedChips="selectedCoders" SelectionMode="SelectionMode.MultiSelection" CheckMark>
                                <MudChip Class="border-solid border-2 mud-b mud-border-white" Icon="@Icons.Material.Rounded.PersonAddAlt1" Variant="Variant.Text" Color="Color.Secondary"  @onclick="() => AddCoderToGroup(coder)">
                                </MudChip>
                            </MudChipSet>
                        </MudContainer>
                        <div class="cards__profile">
                            <div class="cards__coder">
                                <h6>@coder.FirstName @coder.FirstLastName</h6>
                                <p>@coder.Stack</p>
                                <!-- Añadir el evento OnClick al ícono -->
                            
                            </div>
                        </div>
                        @*badges*@
                        @if (coder.Skills != null)
                        {
                            <div class="cards__badges">
                                @for (int i = 0; i < coder.Skills.Count && i < 6; i++)
                                {
                                    <div class="cards__badge" OnClick="@(() => ShowDetails(@coder.Id))">@coder.Skills[i].Language_Programming</div>

                                }
                            </div>
                        }
                        else
                        {
                            <MudText Typo="Typo.h6">No hay habilidades que mostrar</MudText>
                        }
                        @*Buttons*@
                        <MudContainer>
                            <MudButton Color="Color.Secondary" Variant="Variant.Filled" FullWidth="true" OnClick="@(() => ShowDetails(@coder.Id))">@ButtonDetails</MudButton>
                        </MudContainer>
                    </div>
                </MudCardContent>
            </MudCard>
        }
    </div>

    <div class="container-pagination">
        <div class="container-box">
            <MudPagination Variant="Variant.Filled"  ShowPreviousButton="false" ShowNextButton="false" Count="@pag" PageSize="@pageSize"  TotalItems="@totalCoders" SelectedChanged="@OnPageChanged" Rectangular="true" />
        </div>
    </div>
}
else
{
    <p><em>Loading...</em></p>

}

@code
{   
    public string ButtonDetails = "Detalle";
    private List<Coder>? coders;
    
    // Lista que contiene los Ids de los Coders seleccionados
    private List<string> selectedCoders = new List<string>();

    //paginación
    private List<Coder>? paginatedCoders;
    private int totalCoders;
    private int currentPage = 1;
    private int pageSize = 8;
    private int pag;

    //filtrado*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-
    //Lista para guardar los coder filtrados
    private List<Coder>? filterCoder;

    // Variables para los filtros
    private string? firstName;
    private string? firstLastName;
    private string? skills;
    private string? languageLevel;
    private string? searchText;
      private List<Coder> _selectedCoders = new(); // Lista de programadores seleccionados

    private bool FilterApplied = false;


    private Task OpenDialogAsync()
    {    
        var options = new DialogOptions { CloseOnEscapeKey = true };

        return DialogService.ShowAsync<DialogKeyboardNavigationExample_Dialog>("Simple Dialog", options);
    }
    
    
    @* logica para modal existente *@
    private bool _open = false;

    private void ToggleDrawer()
    {
        _open = !_open;
    } 

    // Método para agregar un programador al grupo
    public void AddCoderToGroup(Coder coder)
    {
        if (!_selectedCoders.Contains(coder))
        {
            _selectedCoders.Add(coder); // Agregar el coder a la lista de seleccionados
        }
    }    // Método para eliminar un programador del grupo cuando se cierra un chip
    public void RemoveCoderFromGroup(MudChip<string> chip)
    {
        var coderToRemove = _selectedCoders.FirstOrDefault(c => $"{c.FirstName} {c.FirstLastName}" == chip.Text);
        if (coderToRemove != null)
        {
            _selectedCoders.Remove(coderToRemove); // Eliminar el coder de la lista de seleccionados
        }
    }    // Método Add que ya tienes (puedes adaptarlo si es necesario)
    private int _i = 1;
    private List<string> _values = new();
    public void Add() => _values.Add("Value " + (_i++));
    

    protected override async Task OnInitializedAsync()
    {
        //realizamos el llamado a la api
        try
        {
            coders = await coderService.GetCodersAsync();
            totalCoders = coders.Count;
            pag = (int)Math.Ceiling((double)totalCoders / pageSize);
            Console.WriteLine(pag);
            LoadCoders(currentPage);
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }

    private async Task LoadCodersAsync()
    {
        try
        {
            coders = await coderService.GetCodersAsync();
        }
        catch(Exception ex)
        {
            Console.WriteLine($"Error al obtener coders: {ex.Message}");
        }
    }


    private void OnPageChanged(int pageNumber)
    {
        currentPage = pageNumber;
        LoadCoders(currentPage);
    }
    
    // Método para manejar la selección o deselección de Coders
    private void SelectCoder(string coderId)
    {
        if (selectedCoders.Contains(coderId))
        {
            selectedCoders.Remove(coderId);  // Eliminar si ya está seleccionado
        }
        else
        {
            selectedCoders.Add(coderId);  // Agregar si no está seleccionado
        }
        
        Console.WriteLine($"Coders seleccionados: {string.Join(", ", selectedCoders)}");
    }

    private async Task FilterCoders()
    {
    // Primero, cargamos la lista completa desde el servicio
    Console.WriteLine("HOLA");
    coders = await coderService.GetCodersAsync();

    // Filtrar por nombres o apellidos (FirstName, SecondName, FirstLastName, SecondLastName)
    if (!string.IsNullOrEmpty(searchText))
    {
        var searchTerms = searchText.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
        Console.WriteLine("Filtrando por nombres o apellidos...");

        coders = coders.Where(c =>
        {
            var fullName = $"{c.FirstName} {c.SecondName} {c.FirstLastName} {c.SecondLastName}".ToLower();

            // Verificar todas las combinaciones posibles
            bool isMatch = searchTerms.All(term =>
                $"{c.FirstName} {c.SecondName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.FirstLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.SecondName} {c.FirstLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.SecondName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstLastName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.SecondName} {c.FirstLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.SecondName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.FirstLastName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.SecondName} {c.FirstLastName} {c.SecondLastName}".ToLower().Contains(term.ToLower()) ||
                $"{c.FirstName} {c.SecondName} {c.FirstLastName} {c.SecondLastName}".ToLower().Contains(term.ToLower())
            );
            FilterApplied = true;
            return isMatch;
        }).ToList();
    }

    // Aplicar filtro de Skills
    if (!string.IsNullOrEmpty(skills))
    {
        coders = coders.Where(c => c.Skills.Any(s => s.Language_Programming.Contains(skills, StringComparison.OrdinalIgnoreCase))).ToList();
    }
    // Aplicar filtro de Nivel de Lenguaje
    if (!string.IsNullOrEmpty(languageLevel))
    {
        coders = coders.Where(c => c.LanguageSkills != null && c.LanguageSkills.Language_Level.Equals(languageLevel, StringComparison.OrdinalIgnoreCase)).ToList();
        FilterApplied = true;
    }

    totalCoders = coders.Count;
    pag = (int)Math.Ceiling((double)totalCoders / pageSize);
    LoadCoders(currentPage);

    // Actualizar la UI para reflejar los cambios
    StateHasChanged();
    }


    private async Task ClearFilters()
    {
        // Limpia los valores de los filtros
        Console.WriteLine("Limpiaste");
            // Limpia los valores de los filtros
        firstName = "";
        firstLastName = "";
        skills = "";
        languageLevel = "";


        // Recarga la lista completa de coders sin filtros de manera asíncrona
        coders = await coderService.GetCodersAsync();

        // Actualiza el total de coders y las páginas
        totalCoders = coders.Count;
        pag = (int)Math.Ceiling((double)totalCoders / pageSize);

        // Carga la primera página después de limpiar los filtros
        currentPage = 1;
        LoadCoders(currentPage);
        FilterApplied = false;

        // Actualiza la UI
        StateHasChanged();
    }
    
    private void LoadCoders(int pageNumber)
    {
        paginatedCoders = coders
                            .Skip((pageNumber - 1) * pageSize)
                            .Take(pageSize)
                            .ToList();
    }
    
    //Funcionalidad ver detalles
    private async Task ShowDetails(string id)
    {
        var coder = coders.FirstOrDefault(c => c.Id == id);
        if (coder != null)
        {
            var parameters = new ModalParameters();
            parameters.Add(nameof(ModalCoderDetails.Coder), coder);

            var modal = model.Show<ModalCoderDetails>("", parameters);
            await modal.Result;
        }
    }
    
    //Lógica para renderizar imagen por defecto
    private string ImageNullOrEmpty(string? photo)
    {
        if(string.IsNullOrEmpty(photo))
        {
            return "images/Avatar1.png";
        }

        return photo;
    }
};