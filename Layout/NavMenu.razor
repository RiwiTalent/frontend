@using Microsoft.AspNetCore.Components.Authorization
@using riwi.Services
@inject AuthenticationStateProvider autenticacionProvider
@inject NavigationManager navManager

<MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Bordered="true" Class="pa-2">
    <MudNavLink Href="/coders" Match="NavLinkMatch.All" Icon="@Icons.Material.Rounded.Code" >Coders</MudNavLink>
    <MudNavLink href="/groups" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Groups">Grupos</MudNavLink>
    
    <!-- Llama a la función CerrarSesion cuando se hace clic -->
    <MudNavLink OnClick="CerrarSesion" Match="NavLinkMatch.All" Icon="@Icons.Material.Rounded.Logout">Cerrar Sesión</MudNavLink>
</MudNavMenu>

<!-- Muestra la alerta de error si hay un mensaje -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-2">
        @errorMessage
    </MudAlert>
}

@code
{
    public string errorMessage;

    // Función para cerrar sesión
    private async Task CerrarSesion()
    {
        try
        {
            var autenticacionExt = (AuthenticacionExtension)autenticacionProvider;
            await autenticacionExt.ActualizarEstadoAutenticacion(null); // Cierra la sesión
            navManager.NavigateTo("/", true); // Redirige al inicio
        }
        catch (Exception ex)
        {
            errorMessage = "Hubo un error cerrando la sesión. Inténtalo nuevamente más tarde."; // Manejo de errores
            Console.WriteLine($"Error cerrando sesión: {ex.Message}");
        }
    }
}