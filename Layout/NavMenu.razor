@using Microsoft.AspNetCore.Components.Authorization
@using riwi.Services
@using riwi.Theme
@inject AuthenticationStateProvider autenticacionProvider
@inject riwi.Services.AuthService authService
@inject NavigationManager navigationManager


<MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Bordered="true" Class="pa-2">
    <MudNavLink Href="/coders" Match="NavLinkMatch.All" Icon="@Icons.Material.Rounded.Code" >Coders</MudNavLink>
    <MudNavLink href="/groups" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Groups">Grupos</MudNavLink>
    
    <!-- Llama a la función CerrarSesion cuando se hace clic -->
    <MudNavLink OnClick="Logout" Match="NavLinkMatch.All" Icon="@Icons.Material.Rounded.Logout">Cerrar Sesión</MudNavLink>
</MudNavMenu>

<!-- Muestra la alerta de error si hay un mensaje -->
@if (!string.IsNullOrEmpty(errorMessage))
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Class="my-2">
        @errorMessage
    </MudAlert>
}

@code
{
    public string errorMessage;
    private async Task Logout()
    {
     
        try
        {
            // Llamar a la función de Logout en AuthService
            await authService.Logout();

            // Redirigir a la página de inicio de sesión o cualquier otra ruta
            navigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            errorMessage = "Hubo un error cerrando la sesión. Inténtalo nuevamente más tarde."; // Manejo de errores
            Console.WriteLine($"Error cerrando sesión: {ex.Message}");
        }
    }
    private bool collapseNavMenu = true;

    private Dictionary<int, string> iconColors = new Dictionary<int, string>
    {
        {1, RiwiPalette.Primary500},
        {2, RiwiPalette.Primary500},
        {3, RiwiPalette.Primary500}
    };

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void HoverIcon(int iconId, bool isHovered)
    {
        iconColors[iconId] = isHovered ? RiwiPalette.Secondary500 : RiwiPalette.Primary500;
    }

}
